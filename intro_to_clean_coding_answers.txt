####EXERCISES
> In your own words, explain what clean code is and why it is important.
A: Clean code is organized, maintainable code, easy to read code. It has reusable components and each function has one sole purpose.
Clean code not only makes more sense logically and looks better aesthetically, but it is also easier to scale.

> Read this article about Toyota and their use of bad code. Although you may not yet understand all of the topics discussed, think about another commonly used object that relies on computers and explain what would happen if the code was not created to an acceptable standard.
A: An example of a commonly used object that relies on computers would be the exploding Samsung phones.
At first glance, It is possible that the code used to program the phones was incompatible with the size of the battery causing the explosion. If it had nothing to do with the battery, I could see why bad code may cause a short circuit.

> Would you consider the following to be clean code? Explain why or why not. If not refactor the code.
```FUNCTION do(x, y)               // Creating a new function
 IF y = "F" THEN               // Check if y is equal "F"
 SET z to (xâˆ’32) * (5/9)       // Formula to convert degrees fahrenheit to celsius
 PRINT z                       // Print result
 ELSE IF y = "C" THEN          // If y not equal to "F", check if equal to "C"
 SET z to x * 1.8000 + 32.00   // Formula to convert degrees celsius to fahrenheit
 PRINT z                       // Print result
 END IF
END FUNCTION```

Refactored code
```
FUNCTION convertDegree(x, y)
  IF y = "F" THEN SET z to (x-32) * (5/9) degrees Fahrenheit to Celsius
  ELSE IF y = "C" THEN SET z to x * 1.8000 + 32.00 degrees Fahrenheit to Celcius
    PRINT z

  END IF
END FUNCTION
 ```

 > Would you consider the following to be clean code? Explain why or why not. If not refactor the code.
 ```
 FUNCTION calcPercent(sum, total)
 IF NOT(total = 0) THEN
     SET percentage to sum / total * 100
 ELSE
   PRINT "Sorry, cannot divide by 0"
 END IF

 PRINT percentage
END FUNCTION
 ```
A: This code does appear to be clean. The only thing I have some hesitation with is the Else Print. I'm thinking that the ELSE may not be necessary and could be combined with the first IF NOT. But I'm not 100% sure.

> Using pseudocode, refactor the code for the following examples using the principles you have learned in this checkpoint.
>a. The following function prints the subtotal of a customer's transaction and receives payment accordingly.
```
FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
   PRINT "Your total due is: " + subTotal * discountRate + (subTotal * tax)

   IF paymentType = 'CASH' THEN
       CALL getPayment RETURNING amount
       PRINT "Change due: " + amount - subTotal * discountRate + (subTotal * tax)
   ELSE IF paymentType = 'CREDIT CARD' THEN
       CALL getPayment RETURNING amount
       PRINT "Your credit card has been charged: " + subTotal * discountRate + (subTotal * tax)
   END IF
END FUNCTION
```

Refactored code
```
FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
   PRINT "Your total due is: " + subTotal * discountRate + (subTotal * tax)

FUNCTION getPaymentType (paymentType)
   IF paymentType = 'CASH' THEN
       CALL getPayment RETURNING amount
       PRINT "Change due: " + amount - subTotal * discountRate + (subTotal * tax)
   ELSE IF paymentType = 'CREDIT CARD' THEN
       CALL getPayment RETURNING amount
       PRINT "Your credit card has been charged: " + subTotal * discountRate + (subTotal * tax)
   END IF
END FUNCTION
```

>b. The following function checks out a book if there are no issues with the guest's account.
```
FUNCTION checkoutBook(book, guest)
 IF guest.accountActive THEN
     IF NOT(guest.hasOverdueBooks) THEN
         IF guest.outstandingFees = 0 THEN
           APPEND book to guest.books
           SET book.status to "Checked Out"
           PRINT "Your books have been issued."
         END IF
     END IF
 ELSE
     PRINT "Unable to check out book."
 END IF
END FUNCTION
```

Refactored code
```
FUNCTION checkoutBook(book, guest)
 IF guest.accountActive THEN IF NOT(guest.hasOverdueBooks) AND guest.outstandingFees = 0 THEN APPEND book to guest.books AND SET book.status to "Checked Out"
      PRINT "Your books have been issued."
         END IF
     END IF
 ELSE
     PRINT "Unable to check out book."
 END IF
END FUNCTION
```

> c. The following class is a code snippet that should support the transactions a customer can perform at an ATM.
```
CLASS BankAccount

 FUNCTION displayBalance
    PRINT balance
 END FUNCTION

 FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION

 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
     END
 END FUNCTION

 FUNCTION creditCardOffer
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
     END
 END FUNCTION

 FUNCTION checkStatus
     IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
     END
 END FUNCTION

 ....
 ....
 ....

END
```

Refactored
```
CLASS BankAccount

 FUNCTION displayBalance(amount)
    PRINT balance
 END FUNCTION

 FUNCTION deposit(amount)
    SET balance to balance + amount
    PRINT displayBalance
 END FUNCTION

 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
       PRINT displayBalance
     END
 END FUNCTION

 FUNCTION creditCardOffer()
  IF (customer.hasCreditCard) THEN
  PRINT displayBalance
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
     END
 END FUNCTION

 FUNCTION checkStatus
     IF(customer.hasCheckingAccount) THEN
     PRINT displayBalance
     IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
     END
 END FUNCTION

 ....
 ....
 ....

END
```

####PROGRAMMING QUESTIONS

>You may do the following problems in any language of your choice.
Use the clean code principles taught in this section while writing the code.
>6.Given an array of integers, find out whether the sum of the integers is a perfect square.
If it is a perfect square, return the square root, otherwise return the sum.
```
Example:
[10,1,4,6,1,1,2] returns 5 because the square root of 25 is 5.
[1,1] returns 2 because 2 is not a perfect square.
The square root of 2 is approximately 1.414213562373095.
```
####CODE
```
function getPerfectSquare(inputArray){
  var sum = 0;
    for (i = 0; i < inputArray.length; i++){ sum += inputArray[i];
    }
    if (sum !== Math.floor(sum)){ return (Math.sqrt(inputArray));
    }
 else { return sum;
 }
}
getPerfectSquare([10,1,4,6,1,1,2]);
```

> 7. Given an array of integers, find out whether the array contains any duplicate elements.
The function should return true if any value appears at least twice in the array, and false if every element is distinct.
```
function hasDuplicates(inputArray) {
    var valuesSoFar = Object.create(null);
    for (var i = 0; i < inputArray.length; ++i) {
        var value = inputArray[i];
        if (value in valuesSoFar) {
            return true;
        }
        valuesSoFar[value] = true;
    }
    return false;
}

hasDuplicates([1, 1, 5, 7]);
```

> 8. An anagram is a word, phrase, or name formed by rearranging the letters of another word.
For example, spar can be formed from rasp.
Given two strings, stringOne and stringTwo, determine if stringOne is an anagram of stringTwo.
Assume that the strings contain only lowercase letters and do not worry about case-sensitivity.
Hint: Your first task will be to convert the strings to arrays.

var string1 = "care";
var string2 = "race";

function testAnagram (string1, string2){
  if(!string1 || !string2 || string1.length !== string2.length){return false;}
    var lowerCaseString1 = string1.toLowerCase();
    var lowerCaseString2 = string2.toLowerCase();
  if(lowerCaseString1 === lowerCaseString2) {return false;}
    var returnString1 = lowerCaseString1.split('').sort().join('');
    var returnString2 = lowerCaseString2.split('').sort().join('');

    return returnString1 === returnString2;
}
 var result = testAnagram(string1, string2);

 console.log(result);
